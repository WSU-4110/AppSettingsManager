version: 2.1

jobs:
  build-api:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - checkout:
          path: ..
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - run:
          name: Restore NuGet packages
          command: dotnet restore
      - run:
          name: Build
          command: dotnet build --configuration Release
      - run:
          name: Test
          command: dotnet test --configuration Release
      - run:
          name: Publish
          command: dotnet publish --configuration Release --output ./publish
      - persist_to_workspace:
          root: .
          paths:
            - publish
  
  build-bff:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    working_directory: ./AppSettingsManagerBff
    steps:
      - checkout:
          path: ..
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - run:
          name: Restore NuGet packages
          command: dotnet restore
      - run:
          name: Build
          command: dotnet build --configuration Release
      - run:
          name: Test
          command: dotnet test --configuration Release
      - run:
          name: Publish
          command: dotnet publish --configuration Release --output ./publish
      - persist_to_workspace:
          root: .
          paths:
            - publish

  push-and-deploy-api-test:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    environment:
      AWS_CLI_VERSION: 1.20.0
    working_directory: ./AppSettingsManagerApi
    steps:
      - checkout:
          path: ..
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-$AWS_CLI_VERSION.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Configure AWS CLI
          command: |
            echo $AWS_ACCESS_KEY_ID | aws configure set aws_access_key_id
            echo $AWS_SECRET_ACCESS_KEY | aws configure set aws_secret_access_key
            echo $AWS_DEFAULT_REGION | aws configure set default.region
      - run:
          name: Build and push Docker image
          command: |
            export IMAGE_NAME=$AWS_ECR_URL_TEST_API/my-net-app:latest
            docker build -t $IMAGE_NAME ./publish
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            docker push $IMAGE_NAME
      - run:
          name: Deploy to ECS
          command: |
            export TASK_DEF=$(aws ecs describe-task-definition --task-definition my-net-app --query taskDefinition.taskDefinitionArn)
            aws ecs update-service --cluster my-ecs-cluster --service my-net-app-service --task-definition $TASK_DEF --force-new-deployment
            
  push-and-deploy-api-prod:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    environment:
      AWS_CLI_VERSION: 1.20.0
    working_directory: ./AppSettingsManagerApi
    steps:
      - checkout:
          path: ..
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-$AWS_CLI_VERSION.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Configure AWS CLI
          command: |
            echo $AWS_ACCESS_KEY_ID | aws configure set aws_access_key_id
            echo $AWS_SECRET_ACCESS_KEY | aws configure set aws_secret_access_key
            echo $AWS_DEFAULT_REGION | aws configure set default.region
      - run:
          name: Build and push Docker image
          command: |
            export IMAGE_NAME=$AWS_ECR_URL_PROD_API/my-net-app:latest
            docker build -t $IMAGE_NAME ./publish
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            docker push $IMAGE_NAME
      - run:
          name: Deploy to ECS
          command: |
            export TASK_DEF=$(aws ecs describe-task-definition --task-definition my-net-app --query taskDefinition.taskDefinitionArn)
            aws ecs update-service --cluster my-ecs-cluster --service my-net-app-service --task-definition $TASK_DEF --force-new-deployment

  push-and-deploy-bff-test:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    environment:
      AWS_CLI_VERSION: 1.20.0
    working_directory: ./AppSettingsManagerBff
    steps:
      - checkout:
          path: ..
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-$AWS_CLI_VERSION.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Configure AWS CLI
          command: |
            echo $AWS_ACCESS_KEY_ID | aws configure set aws_access_key_id
            echo $AWS_SECRET_ACCESS_KEY | aws configure set aws_secret_access_key
            echo $AWS_DEFAULT_REGION | aws configure set default.region
      - run:
          name: Build and push Docker image
          command: |
            export IMAGE_NAME=$AWS_ECR_URL_TEST_BFF/my-net-app:latest
            docker build -t $IMAGE_NAME ./publish
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            docker push $IMAGE_NAME
      - run:
          name: Deploy to ECS
          command: |
            export TASK_DEF=$(aws ecs describe-task-definition --task-definition my-net-app --query taskDefinition.taskDefinitionArn)
            aws ecs update-service --cluster my-ecs-cluster --service my-net-app-service --task-definition $TASK_DEF --force-new-deployment
            
  push-and-deploy-bff-prod:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    environment:
      AWS_CLI_VERSION: 1.20.0
    working_directory: ./AppSettingsManagerBff
    steps:
      - checkout:
          path: ..
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-$AWS_CLI_VERSION.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Configure AWS CLI
          command: |
            echo $AWS_ACCESS_KEY_ID | aws configure set aws_access_key_id
            echo $AWS_SECRET_ACCESS_KEY | aws configure set aws_secret_access_key
            echo $AWS_DEFAULT_REGION | aws configure set default.region
      - run:
          name: Build and push Docker image
          command: |
            export IMAGE_NAME=$AWS_ECR_URL_PROD_BFF/my-net-app:latest
            docker build -t $IMAGE_NAME ./publish
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            docker push $IMAGE_NAME
      - run:
          name: Deploy to ECS
          command: |
            export TASK_DEF=$(aws ecs describe-task-definition --task-definition my-net-app --query taskDefinition.taskDefinitionArn)
            aws ecs update-service --cluster my-ecs-cluster --service my-net-app-service --task-definition $TASK_DEF --force-new-deployment

workflows:
  version: 2
  build-deploy:
    jobs:
      - build-api
      - approval-for-test-api:
          requires: [ build-api ]
          type: approval
      - push-and-deploy-api-test:
          requires: [ approval-for-test-api ]
      - approval-for-prod-api:
          requires: [ push-and-deploy-api-test ]
          type: approval
          filters:
            branches:
              only: main
      - push-and-deploy-api-prod:
          requires: [ approval-for-prod-api ]
      - build-bff
      - approval-for-test-bff:
          requires: [ build-bff ]
          type: approval
      - push-and-deploy-bff-test:
          requires: [ approval-for-test-bff ]
      - approval-for-prod-bff:
          requires: [ push-and-deploy-bff-test ]
          type: approval
          filters:
            branches:
              only: main
      - push-and-deploy-bff-prod:
          requires: [ approval-for-prod-bff ]
